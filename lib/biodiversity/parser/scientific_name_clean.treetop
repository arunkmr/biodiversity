# encoding: UTF-8
grammar ScientificNameClean

  rule scientific_name
    species_name
    /
    uninomial_name
  end
  
  rule species_name
    a:cap_latin_word space_hard b:latin_word {
      def value
        a.value + " " + b.value 
      end

      def canonical
        value
      end
      
      def pos
        {a.interval.begin => ['genus', a.interval.end], b.interval.begin => ['species', b.interval.end]}
      end
      
      def details
        {:genus => {:epitheton => a.value}, :species => {:epitheton => b.value}}
      end
    }
  end
  
  
  rule uninomial_name
    a:uninomial_epitheton space_hard b:authorship {
      def value
        a.value + " " + b.value
      end
      
      def canonical
        a.canonical
      end
      
      def pos
        a.pos.merge(b.pos)
      end
      
      def details
        {:uninomial => a.details[:uninomial].merge(b.details)}
      end
    }
    /
    uninomial_epitheton
  end

  rule uninomial_epitheton
    cap_latin_word {
      def canonical
        value
      end
      
      def pos
        {interval.begin => ['uninomial', interval.end]}
      end
      
      def details 
        {:uninomial => {:epitheton => value}}
      end
    }
  end
   
  rule authorship
    a:authors_names space [,]? space b:year {
      def value
        a.value + " " + b.value
      end
      
      def pos
        a.pos.merge(b.pos)
      end
      
      def details
        { :authorship => text_value, 
          :basionymAuthorTeam => {
            :authorTeam => a.text_value
          }.merge(a.details).merge(b.details)
        }
      end
    }
    /
    authors_names {
      def details
        { :authorship => text_value, 
          :basionymAuthorTeam => {
            :authorTeam => text_value
          }.merge(super)
        }      
      end
    }
  end
  
  rule authors_names
    a:author_name space sep:author_separator space b:authors_names {
      def value
        sep.apply(a,b)
      end
      
      def pos
        sep.pos(a,b)
      end
      
      def details
        sep.details(a,b)
      end
    }
    /
    author_name
  end  
  
  rule author_separator
    ("&"/","/"and"/"et") {
      def apply(a,b)
        sep = text_value.strip
        sep = " et" if ["&","and","et"].include? sep
        a.value + sep + " " + b.value
      end
      
      def pos(a,b)
        a.pos.merge(b.pos)
      end
      
      def details(a,b)
        {:author => a.details[:author] + b.details[:author]}
      end
    }
  end
  
  rule author_name
    space a:author_word space b:author_name space {
      def value
        a.value + " " + b.value
      end
      
      def pos
        a.pos.merge(b.pos)
      end
      
      def details
        {:author => [a.value]}
      end
    }
    /
    author_word
  end
  
  rule author_word
    "A S. Xu" {
      def value
        text_value.strip
      end
      
      def pos
        {interval.begin => ['author_word', 1], (interval.begin + 2) => ['author_word', 2], (interval.begin + 5) => ['author_word', 2]}
      end
      
      def details
        {:author => [value]}
      end
    }
    /
    ("anon."/"f."/"bis"/"arg."/"da"/"der"/"den"/"de"/"du"/"la"/"ter"/"van"/"et al.\{\?\}"/"et al.") {
      def value
        text_value.strip
      end
      
      def pos
        #cheating because there are several words in some of them
        {interval.begin => ['author_word', interval.end]}
      end
      
      def details
        {:author => [value]}
      end
    }
    / 
    ("Å"/"Ö"/"Á"/"Ø"/"Ô"/"Š"/"Ś"/"Č"/"Ķ"/"Ł"/"É"/"Ž"/[A-Z]) [^0-9()\s&,]+ {
      def value
        text_value.gsub(/\s+/, " ").strip
      end
      
      def pos
        {interval.begin => ['author_word', interval.end]}
      end
      
      def details
        {:author => [value]}
      end
    }
  end
  
  rule cap_latin_word
    a:([A-Z]/cap_digraph) b:latin_word "?" {
      def value
        (a.value rescue a.text_value) + b.value
      end
    }
    /
    a:([A-Z]/cap_digraph) b:latin_word {
      def value
        (a.value rescue a.text_value) + b.value
      end
    }
    /
    ("Ca"/"Ea"/"Ge"/"Ia"/"Io"/"Io"/"Ix"/"Lo"/"Oa"/"Ra"/"Ty"/"Ua"/"Aa"/"Ja"/"Zu"/"La"/"Qu"/"As"/"Ba") {
      def value
        text_value
      end
    }
  end

  rule latin_word
    a:[a-zëüäöïé] b:full_name_letters {
      def value
        a.text_value + b.value
      end
     }
     /
     a:digraph b:full_name_letters {
      def value
        a.value + b.value
      end
     }
  end

  rule full_name_letters
    a:digraph b:full_name_letters {
      def value
        a.value + b.value
      end
    }
    /
    a:valid_name_letters b:digraph c:full_name_letters {
      def value
        a.value + b.value + c.value
      end
    }
    /
    valid_name_letters
  end

  rule valid_name_letters
    [a-z\-ëüäöïé]+ {
      def value
        text_value
      end
    }
  end 

  rule cap_digraph
    "Æ" {
      def value
      'Ae'
      end
    }
    /
    "Œ" {
      def value
      'Oe'
      end
    }  
  end

  rule digraph
    "æ" {
      def value
      'ae'
      end
    }   
    /
    "œ" {
      def value
      'oe'
      end
    }
  end

  rule year
    year_number_with_character
    /
    year_number
  end

  rule year_number_with_character
    a:year_number [a-zA-Z] {
      def value
        a.text_value
      end

      def pos
        {interval.begin => ['year', interval.end]}
      end

      def details
        {:year => value}
      end
    }
  end
  
  rule year_number
    [12] [7890] [0-9] [0-9\?] {
      def value
        text_value
      end
      
      def pos
        {interval.begin => ['year', interval.end]}
      end
      
      def details
        {:year => value}
      end
    }
  end
  
  rule space
    [\s]*
  end

  rule space_hard
    [\s]+
  end
  
end